<?xml version="1.0" encoding="UTF-8"?>
<project name="opensource-setup" default="help" basedir=".">

    <dirname property="root-dir" file="."/>
    <property file="${root-dir}/build.local.properties"/>
    <property file="pom.properties" />
    <property file="build.server.properties" />
    <condition property="osname" value="macosx">
        <os name="Mac OS X" />
    </condition>
    <condition property="osname" value="windows">
        <os name="Windows XP" />
    </condition>

    <property file="build.${osname}.properties" />
    <condition property="osfamily" value="winnt">
        <os family="winnt" />
    </condition>
    <condition property="osfamily" value="unix">
        <os family="unix" />
    </condition>
    <property file="build.${osfamily}.properties" />
    <property file="build.properties" />

    <!-- set environment variables -->
    <property name="env.ANT_HOME" value="${ant-home}" />
    <property name="env.MAVEN_HOME" value="${maven-home}" />
    <property name="env.MAVEN_MEMORY_OPTS" value="${maven-memory-opts}" />
    <property name="env.MAVEN_OPTS" value="${maven-memory-opts}" />
    <property name="env.TOMCAT_HOME" value="${tomcat-home}" />
    <property name="env.JAMES_HOME" value="${james-home}" />
    <property name="env.GEM_HOME" value="${tools-dir}${file.separator}ruby${file.separator}gems" />
    <property environment="env" />
    <tstamp>
        <format property="time-suffix" pattern="yyyy-MM-dd-HH-mm-ss" />
    </tstamp>
    <property name="html-project-list" value="htmlcleaner,jericho-html"/>
    <property name="t4-project-list" value="amplafi-hivemind,amplafi-tapestry4-test,amplafi-tapestry4-utils,amplafi-tapestry4-springsecurity"/>
    <property name="flow-project-list" value="amplafi-flow-core,amplafi-flow-client,amplafi-flow-tapestry4,amplafi-flow-tutorial,amplafi-flow-tapestry5" />
    <property name="opensource-project-list" value="amplafi-android,amplafi-opensource-parent,amplafi-json,amplafi-sworddance,${flow-project-list},${t4-project-list},${html-project-list}"/>
    <!-- TARGETS -->
    <!-- needed because ant-contrib may not yet be copied to the ant/lib directory -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${tools-dir}/ant-contrib-${ant-contrib-build}/ant-contrib-${ant-contrib-build}.jar"/>

    <target name="help" description="HOW TO GET STARTED">
        <echo>Getting started:</echo>
        <echo>You are running on : ${osname} ${osfamily} / ${os.version} ${os.name} ${os.arch}</echo>
        <echo>Standard tools needed: ( you may have some of them already ) 
            1. eclipse 3.5 or higher from ${remote-eclipse-site}
            2. java ${java-build} (Current: runtime: ${java.runtime.version} compiler: ${java.version} )
        
            Run: "opensource-one-time-setup" will check and download any missing tools. You may need to run this repeatedly.
            
            Run: "apache-ant-1.8.2${file.separator}bin${file.separator}ant -p" for other commands
        </echo>
    </target>
    <target name="opensource-one-time-setup" depends="_configure_environment,validate-tools-opensource,update-source,dependencies-all-opensource,complete-one-time-config-opensource,_build-clean-all-opensource"
        description="configures the opensource tools">
    </target>
    <target name="complete-one-time-config-opensource" depends="dependencies-all-opensource,_build-clean-all-opensource,eclipse-one-time-config-opensource">
    </target>

    <!-- support tasks-->
    <target name="_configure_environment">

        <!-- check if ANT_HOME is set-->
        <antcall target="_check-environment-variable">
            <param name="environment-variable" value="ANT_HOME" />
        </antcall>
        <!-- check if MAVEN_HOME is set-->
        <antcall target="_check-environment-variable">
            <param name="environment-variable" value="MAVEN_HOME" />
        </antcall>
        <!-- check if TOMCAT_HOME is set-->
        <antcall target="_check-environment-variable">
            <param name="environment-variable" value="TOMCAT_HOME" />
        </antcall>
        <!-- check if JAMES_HOME is set-->
        <antcall target="_check-environment-variable">
            <param name="environment-variable" value="JAMES_HOME" />
        </antcall>
    </target>
    <!-- This target assumes the environment variables are already loaded in env -->
    <target name="_check-environment-variable">
        <fail unless="environment-variable" />
        <property environment="test-env" />
        <property name="nested-system-environment-variable" value="test-env.${environment-variable}" />
        <_propertycopy name="system-environment-variable" from="${nested-system-environment-variable}" />
        <property name="nested-using-environment-variable" value="env.${environment-variable}" />
        <_propertycopy name="using-environment-variable" from="${nested-using-environment-variable}" />

        <condition property="set-warning">
            <and>
                <isset property="test-env.${environment-variable}" />
                <not>
                    <equals arg1="${using-environment-variable}" arg2="${system-environment-variable}" />
                </not>
            </and>
        </condition>
        <antcall target="_environment-variable-warning">
            <param name="warning-system-variable" value="${environment-variable}" />
            <param name="warning-old-variable" value="${system-environment-variable}" />
            <param name="warning-using-variable" value="${using-environment-variable}" />
        </antcall>
    </target>
    <target name="_environment-variable-warning" if="set-warning">
        <fail unless="warning-system-variable" />
        <fail unless="warning-old-variable" />
        <fail unless="warning-using-variable" />
        <echo> WARNING:  Environment variable ${warning-system-variable} is set to: ${warning-old-variable}
           and instead using: ${warning-using-variable}
        </echo>
    </target>
    <!-- hack obtained from http://ant.apache.org/faq.html#propertyvalue-as-name-for-property -->
    <!-- hack allows to use nested properties -->
    <macrodef name="_propertycopy">
        <attribute name="name" />
        <attribute name="from" />
        <sequential>
            <property name="@{name}" value="${@{from}}" />
        </sequential>
    </macrodef>
    <!-- ============================================================================= -->
    <!-- eclipse configuration -->
    <!-- ============================================================================= -->
    <target name="eclipse-one-time-config-opensource" depends="_eclipse-init-opensource,eclipse-setup-all-opensource" description="You will only need to run this ONCE if Eclipse complains about M2_REPO is not set.">
        <echo>TODO: verify that YOU are running latest eclipse!!!!!!</echo>
        <!-- need to add "-Dfile.encoding=UTF-8" (no quotes) to eclipse.ini see: http://maven.apache.org/general.html#special-characters-site -->
    </target>
    <target name="_eclipse-init-opensource" depends="_eclipse-init-maven-var" />
    <target name="eclipse-setup" depends="dependencies" description="Recreate the eclipse project files">
        <echo>Copy the 'standard' eclipse configuration to where eclipse expects it</echo>
        <echo>Ideally q4e would solve this problem :-P</echo>
        <antcall target="_mvn-no-tests">
            <param name="mvn-target" value="eclipse:clean" />
        </antcall>
        <antcall target="_mvn-no-tests">
            <!-- TODO: -DdownloadJavadocs=true -DdownloadSources=true -->
            <param name="mvn-target" value="eclipse:eclipse" />
        </antcall>
        <!-- default settings should not copy over the previously existing files
        <copy todir=".settings" failonerror="false"  verbose="true">
            <fileset dir="eclipse.${osname}.settings"/>
        </copy>
        <copy todir=".settings" failonerror="false"  verbose="true">
            <fileset dir="eclipse.default.settings"/>
        </copy>
            -->
    </target>
    <target name="eclipse-setup-all-opensource" description="Setup eclipse for the opensource projects">
        <antcall target="_opensource-list-calls">
            <param name="target-call" value="_eclipse-setup-one-project" />
            <param name="target-parameter" value="project-name" />
        </antcall>
    </target>
    <target name="_eclipse-setup-one-project">
        <fail unless="project-name" />
        <antcall target="eclipse-setup">
            <param name="mvn-profile" value="-f ${root-dir}${file.separator}${project-name}${file.separator}pom.xml" />
        </antcall>
    </target>
    <target name="_eclipse-init-maven-var">
        <echo>Creating Eclipse variable (M2_REPO) to point to the maven repository.</echo>
        <antcall target="_mvn-no-tests">
            <param name="mvn-profile" value="-Declipse.workspace=${root-dir}" />
            <param name="mvn-target" value="eclipse:configure-workspace" />
        </antcall>
    </target>
    <target name="build-clean-opensource" depends="clean-opensource,build-opensource" description="clean,build">
    </target>
    <target name="build-opensource" description="Installs all of the opensource projects in the maven repository. Does not run the tests.">
        <antcall target="_opensource-list-calls">
            <param name="target-call" value="_build-clean-for-one-project-using-maven" />
            <param name="target-parameter" value="project-name" />
            <param name="mvn-target" value="install" />
        </antcall>
    </target>
    <target name="clean-opensource" description="Cleans the all of the opensource projects">
        <echo>Cleaning project...</echo>
        <antcall target="_opensource-list-calls">
            <param name="target-call" value="_build-clean-for-one-project-using-maven" />
            <param name="target-parameter" value="project-name" />
            <param name="mvn-target" value="clean" />
        </antcall>
    </target>
    <target name="_build-clean-all-opensource">
        <antcall target="_opensource-list-calls">
            <param name="target-call" value="_build-clean-for-one-project-using-maven" />
            <param name="target-parameter" value="project-name" />
            <param name="mvn-target" value="clean install" />
        </antcall>
    </target>
    <target name="_build-clean-for-one-project-using-maven">
        <!-- TODO: Find a way to have maven calculate the dependencies of multiple projects and perform the clean install as a single build.
                Calling clean install on maven projects one at a time is slow, 
                because maven will clean build all of the dependencies as well.
                There has to be a way to call maven once with all of the needed project information-->
        <fail unless="project-name" />
        <fail unless="mvn-target" message="Need to specify the target(s) (ex. clean)" />
        <antcall target="_mvn-no-tests">
            <param name="mvn-profile" value="-f ${root-dir}${file.separator}${project-name}${file.separator}pom.xml" />
        </antcall>
    </target>

    <!-- ============================================================================= -->
    <!-- getting source code and libraries -->
    <!-- ============================================================================= -->
    <target name="dependencies-all-opensource" description="calls all opensource targets separately with the dependency:sources target for mvn">
        <!-- Get dependencies for each project separately-->
        <antcall target="_opensource-list-calls">
            <param name="target-call" value="_get-dependencies-for-one-project" />
            <param name="target-parameter" value="project-name" />
        </antcall>
    </target>
    <target name="_get-dependencies-for-one-project">
        <fail unless="project-name" />
        <antcall target="dependencies">
            <param name="mvn-profile" value="-f ${root-dir}${file.separator}${project-name}${file.separator}pom.xml" />
        </antcall>
    </target>
    <!-- ============================================================================ -->
    <!-- List of opensource projects -->
    <!-- Target _opensource-list-calls is like a list that antcalls the ${target-call} and supplies the call with it's item on the list.-->
    <!-- General usage of the task is as follows:
    <antcall target="_opensource-list-calls">
        <param name="target-call" value="this is where you put the target to call for each item" />
        <param name="target-parameter" value="if the target needs the opensource project name in a certain parameter put the string literal of that parameter in this parameter" />
        <param name="other target parameters" value="any other parameters that you want to set for the target can be passed on multile lines starting with this one. These parameters will not be used by _opensource-list-calls but are passed on to the target that it calls." />
    </antcall> -->
    <!-- ============================================================================ -->
    <target name="_opensource-list-calls">
        <fail unless="target-call" />
        <fail unless="target-parameter" />
        <!-- amplafi-tools-->
        <!-- The amplafi-tools project is not on the list because I don't know how ant will react when changing the build.xml file at the same time it is running. Like when performing a update-source -->

        <!-- p6spy project from p6spy's account -->
        <echo>Calling ${target-call} for p6spy</echo>
        <antcall target="${target-call}">
            <param name="${target-parameter}" value="p6spy" />
            <!-- this project is not on amplafi's profile-->
            <param name="git-url" value="git@github.com:p6spy/p6spy.git" />
        </antcall>
        <property name="project-owner" value="amplafi"/>
        <for list="${opensource-project-list}" param="project">
            <sequential>
                <echo>Calling ${target-call} for @{project}</echo>
                <antcall target="${target-call}">
                    <param name="${target-parameter}" value="@{project}" />
                </antcall>
            </sequential>
        </for>
    </target>

    <target name="dependencies" description="Get the dependent libraries -Dmvn-profile needs to be set">
        <echo>
            =============================================
            If this may take a looooooooooooong time if you have a slow connection
            Go eat dinner, watch a movie, etc -- but check back just in case something breaks
            (Or it finishes really quickly!)
            =============================================
        </echo>
        <antcall target="_mvn-no-tests">
            <param name="mvn-target" value="dependency:sources" />
        </antcall>
    </target>

    <!-- git tasks-->
    <!-- missing something on how to do push from eclipse -->
    <target name="git-push-all" description="git commit and push all - This target needs a -Dm=&quot;reason for changes here&quot;">
        <!-- commit/push all from list. -->
        <antcall target="git-push">
            <param name="project" value="amplafi-tools"/>
        </antcall>
        <antcall target="_opensource-list-calls">
            <param name="target-call" value="git-push" />
            <param name="target-parameter" value="project" />
        </antcall>
    </target>
    <target name="git-push" description="git commit/push -Dproject needs to be set">
        <fail unless="project" />
        <echo>${project}</echo>
        <exec executable="${git-exec}" dir="${gitrootdir}/${project}">
            <arg value="diff" />
        </exec>
        <fail unless="m" />
        <exec executable="${git-exec}" dir="${gitrootdir}/${project}">
            <arg value="commit" />
            <arg value="-a" />
            <arg value="-q" />
            <arg value="-m" />
            <arg value="${m}" />
        </exec>
        <exec executable="${git-exec}" dir="${gitrootdir}/${project}">
            <arg value="push" />
        </exec>
    </target>
    <target name="git-add-commit" description="git add/commit -Dm, -Ddirectory needs to be set">
        <exec dir="${directory}" executable="${git-exec}" failonerror="true">
            <arg value="add"/>
            <arg value="-A"/>
            <arg value="--"/>
            <arg value="${directory}"/>
        </exec>
        <exec dir="${directory}" executable="${git-exec}" failonerror="false">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="${m}"/>
        </exec>
    </target>
    <target name="git-diff-all" description="git diff all">
        <antcall target="_opensource-list-calls">
            <param name="target-call" value="git-diff" />
            <param name="target-parameter" value="project" />
        </antcall>
    </target>
    <target name="git-diff" description="git diff -Dproject needs to be set">
        <fail unless="project" />
        <echo>${project}</echo>
        <exec executable="${git-exec}" dir="${gitrootdir}/${project}">
            <arg value="diff" />
        </exec>
    </target>
    <!-- TODO: check to make sure git clone on existing directory o.k. prob should switch to _git-update if directory already exists -->
    <target name="git-pull" description="git pull/clone. Parameters project-owner, project, branch">
        <fail unless="project" />
        <property name="gitrootdir" value="${root-dir}"/>
        <!-- supply default local directory name as the project name --> 
        <property name="local-directory" value="${project}" />
        <echo>Local dir: ${local-directory}</echo>
        <condition property="_dont-git-pull">
            <not>
                <available file="${gitrootdir}/${local-directory}/.git" />
            </not>
        </condition>
        <antcall target="_git-pull"/>
        <condition property="_dont-git-clone">
            <available file="${gitrootdir}/${local-directory}/.git" />
        </condition>
        <antcall target="_git-clone"/>
    </target>
    <target name="_git-clone" unless="_dont-git-clone" depends="_gitconfig-warning">
        <fail unless="project" message="Need 'project' to be set."/>
        <fail message="project-owner or git-url needs to be set">
            <condition>
                <not>
                    <or>
                        <isset property="project-owner"/>
                        <isset property="git-url"/>
                    </or>
                </not>
            </condition>
        </fail>
        <mkdir dir="${gitrootdir}"/>
        <property name="git-url" value="${github-base}/${project-owner}/${project}.git" />
        <property name="branch" value="master"/>
        <echo>Cloning ${git-url} (branch : ${branch} ) into ${gitrootdir}/${local-directory}</echo>
        <exec executable="${git-exec}" dir="${gitrootdir}" resultproperty="_git-error-code" failonerror="true">
            <arg value="clone" />
            <arg value="--branch"/>
            <arg value="${branch}"/>
            <arg value="${git-url}" />
            <arg value="${local-directory}"/>
        </exec>
    </target>
    <target name="_git-pull" unless="_dont-git-pull">
        <fail unless="project" />
        <echo>git pulling ${local-directory}</echo>
        <exec executable="${git-exec}" dir="${gitrootdir}/${local-directory}" resultproperty="_git-error-code" failonerror="false" failifexecutionfails="false">
            <arg value="pull" />
        </exec>
    </target>
    <target name="_gitconfig-exists-check">
        <condition property="_gitconfig-exist">
            <available file="${user.home}${file.separator}.gitconfig" />
        </condition>
    </target>
    <target name="_gitconfig-warning" depends="_gitconfig-exists-check" unless="_gitconfig-exist">
        <echo>git may have issues going to github. Mine looks like: (leading tabs )
    [user]
        email = ....
        name = ...
    </echo>
    </target>
    <target name="git-completion-script" description="get the git completion script">
        <exec executable="curl" dir="bin">
            <arg value="https://raw.github.com/git/git/master/contrib/completion/git-completion.bash" />
            <arg value="-O" />
            <arg value="-L" />
        </exec>
        <exec executable="diff" dir="bin" failonerror="false" resultproperty="__diff_git-completion-script">
            <arg value="git-completion.bash" />
            <arg value="${user.home}/bin/git-completion.bash" />
        </exec>
        <fail message="bin/git-completion-script.bash differs from ${user.home}/bin/git-completion.bash. Do manual copy.">
            <condition>
                <equals arg1="${__diff_git-completion-script}" arg2="1" />
            </condition>
        </fail>
        <exec executable="cp" dir="bin">
            <arg value="-f" />
            <arg value="-v" />
            <arg value="git-completion.bash" />
            <arg value="${user.home}/bin/git-completion.bash" />
        </exec>
        <exec executable="diff" dir="bin" failonerror="false" resultproperty="__diff_include-git-completion">
            <arg value="include-git-completion.bash" />
            <arg value="${user.home}/bin/include-git-completion.bash" />
        </exec>
        <fail message="bin/include-git-completion.bash differs from ${user.home}/bin/include-git-completion.bash Do manual copy.">
            <condition>
                <equals arg1="${__diff_include-git-completion}" arg2="1" />
            </condition>
        </fail>
        <exec executable="cp" dir="bin">
            <arg value="-f" />
            <arg value="-v" />
            <arg value="include-git-completion.bash" />
            <arg value="${user.home}/bin/include-git-completion.bash" />
        </exec>
        <echo>
Add :
            
. bin/include-git-completion.bash
            
to your .bashrc
        </echo>
    </target>
    <target name="git-svn-fetch" description="git svn fetch/clone -Dproject needs to be set">
        <fail unless="project"/>
        <property name="gitrootdir" value="${root-dir}"/>
        <condition property="_dont-git-pull">
            <not><available file="${gitrootdir}/${project}"/></not>
        </condition>
        <antcall target="_git-svn-fetch">
        </antcall>
        <condition property="_dont-git-clone">
            <available file="${gitrootdir}/${project}"/>
        </condition>
        <antcall target="_git-svn-clone">
        </antcall>
    </target>    
    <target name="git-svn-pull" description="git svn pull/clone -Dproject needs to be set">
        <fail unless="project"/>
        <property name="gitrootdir" value="${root-dir}"/>
        <condition property="_dont-git-pull">
            <not><available file="${gitrootdir}/${project}"/></not>
        </condition>
        <antcall target="_git-svn-update">
        </antcall>
        <condition property="_dont-git-clone">
            <available file="${gitrootdir}/${project}"/>
        </condition>
        <antcall target="_git-svn-clone">
        </antcall>
    </target>
    <target name="_git-svn-clone" unless="_dont-git-clone" depends="_gitconfig-warning">
        <fail unless="project"/>
        <!-- git-url could be specified or svn-url --> 
        <property name="git-url" value="${svn-url}/${project}${branch}"/>
        
        <echo>git svn cloning ${git-url}</echo>
        <exec executable="${git-exec}" resultproperty="_git-error-code" failonerror="true">
            <arg value="svn"/>
            <arg value="clone"/>
            <!-- to limit range if we need this.
            <arg value="-r"/>
            -->
            <arg value="${git-url}"/>
            <arg value="${gitrootdir}/${project}"/>
        </exec>
    </target>
    <target name="_git-svn-fetch" unless="_dont-git-pull">
        <echo>Updating ${gitrootdir}/${project}</echo>
        <exec dir="${gitrootdir}/${project}" executable="${git-exec}" failonerror="false">
            <arg value="svn"/>
            <arg value="fetch"/>
        </exec>
    </target>    
    <target name="_git-svn-update" depends="_git-svn-fetch" unless="_dont-git-pull">
        <echo>Merging ${project}</echo>

        <echo>Switching to the local master branch and then doing an svn rebase.</echo>
        <exec dir="${gitrootdir}/${project}" executable="${git-exec}" failonerror="true">
            <arg value="checkout"/>
            <arg value="master"/>
        </exec>
        <exec dir="${gitrootdir}/${project}" executable="${git-exec}" failonerror="false">
            <arg value="svn"/>
            <arg value="rebase"/>
        </exec>
    </target>

    <target name="update-source" description="Update the github projects. git pull all github projects">
        <antcall target="git-pull">
            <param name="project" value="amplafi-tools" />
        </antcall>
        <antcall target="_opensource-list-calls">
            <param name="target-call" value="git-pull" />
            <param name="target-parameter" value="project" />
        </antcall>
    </target>

    <target name="validate-tools-opensource" depends="_java-config,_ant-config,_mvn-config,_jruby-config,css-tool-install,server-config-opensource,_update-bashrc,_fail-on-old-ant" description="Validate that the needed opensource tools have been downloaded and are the correct version">
        <fail unless="tomcat-home" message="tomcat-home has not been set." />
        <fail unless="maven-home" message="maven-home has not been set." />
        <fail message="tomcat ports are in use! stop any running instances of tomcat!" if="_tomcat-sockets-in-use" />
    </target>
    <target name="server-config-opensource" depends="_java-config,_ant-config,_tomcat-dev-config-opensource,_james-config-opensource">
    </target>


    <target name="_update-bashrc" depends="_concat-bashrc,_move-env-settings-aside" />
    <target name="_set-update-bashrc">
        <condition property="_update-bashrc">
            <and>
                <os family="unix" />
                <available file="${env.settings}" />
            </and>
        </condition>
    </target>
    <target name="_ask-to-update-bashrc" depends="_set-update-bashrc" if="_update-bashrc">
        <echo>
                The ${env.settings} file exists. 
                The contents need to be in your ${user.home}/.bashrc file.
                
                Contents to be appended:
        </echo>
        <concat>
            <fileset file="${env.settings}" />
        </concat>
        <input message="Update your ${user.home}/.bashrc file with the contents of ${env.settings} [s=skip (already done)], [n=No, stop and will do manually]?" validargs="y,n,s" addproperty="_answer-to-do-update-bashrc" />
        <condition property="do.update-bashrc">
            <equals arg1="y" arg2="${_answer-to-do-update-bashrc}" />
        </condition>
        <fail message="Put the settings recorded in ${env.settings} in your environment file. And then rerun ant.">
            <condition>
                <equals arg1="n" arg2="${_answer-to-do-update-bashrc}" />
            </condition>
        </fail>
    </target>
    <target name="_concat-bashrc" depends="_ask-to-update-bashrc" if="do.update-bashrc">
        <concat destfile="${user.home}/.bashrc" binary="true" append="true">
            <fileset file="${env.settings}" />
        </concat>
    </target>
    <target name="_move-env-settings-aside" if="_update-bashrc">
        <antcall target="_backup">
            <param name="_file" value="${env.settings}" />
            <param name="_ext" value="txt" />
        </antcall>
    </target>

    <!-- tomcat -->
    <target name="_tomcat-dev-config-opensource" depends="_validate-tomcat,_unzip-tomcat" />
    <target name="_validate-tomcat">
        <condition property="_tomcat_is_old">
            <not>
                <available file="${tools-dir}/${tomcat-tool}" />
            </not>
        </condition>
    </target>
    <target name="_unzip-tomcat" if="_tomcat_is_old">
        <echo>Getting the correct version of tomcat.</echo>
        <antcall target="_tools-unzip">
            <param name="remote-tool" value="apache-tomcat-${tomcat-build}.zip" />
            <param name="tool" value="apache-tomcat-${tomcat-build}" />
            <param name="_env-var" value="TOMCAT_HOME" />
            <param name="_build.local-var" value="tomcat-home" />
        </antcall>
        <!-- get the tomcat source into the unzipped executable directory -->
        <!--<get src="http://sworddance.com/tools/apache-tomcat-${tomcat-build}-src.zip" dest="${tools-dir}/apache-tomcat-${tomcat-build}/src.zip" verbose="false" />-->
        <!-- copy instead of get-->
        <copy file="${tools-dir}/apache-tomcat-${tomcat-build}-src.zip" tofile="${tools-dir}/apache-tomcat-${tomcat-build}/src.zip" filtering="false" preservelastmodified="true" />
        <move file="${tomcat-home}/webapps" tofile="${tomcat-home}/webapps-examples" failonerror="false" />
    </target>
    <target name="create-tomcat-ROOT" description="Run if tomcat starts but does not start the web code">
        <fail unless="application-web-project-dir" />
        <echo>Creating ${tomcat-config-dir}/ROOT.xml</echo>
        <echoxml file="${tomcat-config-dir}/ROOT.xml">
            <Context reloadable="true" docBase="${application-web-project-dir}/src/main/webapp" workDir="${application-web-project-dir}/working" debug="99" privileged="true" antiResourceLocking="false" antiJARLocking="false">
                <Logger className="org.apache.catalina.logger.SystemOutLogger" verbosity="4" timestamp="true" />
            </Context>
        </echoxml>
    </target>
    <target name="run-war" description="Run the self contained war">
        <exec executable="java">
            <arg value="-jar"/>
            <arg value="${executable-war-location}"/>
        </exec>
    </target>
    <target name="debug-war" description="Run the self contained war w/debug">
        <fail unless="executable-war-location"/>
        <property name="debug_port" value="8000"/>
        <echo>Debug on port ${debug_port}</echo>
        <exec executable="java">
            <arg value="-agentlib:jdwp=transport=dt_socket,server=y,address=${debug_port}"/>
            <arg value="-jar"/>
            <arg value="${executable-war-location}"/>
        </exec>
    </target>
    <!-- james -->
    <target name="_james-config-opensource" depends="_validate-james,_unzip-james" />
    <target name="_validate-james">
        <echo>Validating James exists: ${james-home}</echo>
        <condition property="_james_is_old">
            <not>
                <available file="${james-home}" type="dir" />
            </not>
        </condition>
    </target>
    <target name="_unzip-james" if="_james_is_old">
        <echo>Getting the correct version of james.</echo>
        <antcall target="_tools-unzip">
            <param name="remote-tool" value="${james-tool}-bin.zip" />
            <param name="_env-var" value="JAMES_HOME" />
            <param name="_build.local-var" value="james-home" />
            <param name="tool" value="${james-tool}" />
            <param name="tool-executable" value="james" />
        </antcall>
    </target>

    <!-- maven -->
    <target name="_mvn-config" depends="_validate-mvn,_unzip-mvn">
    </target>
    <target name="_validate-mvn">
        <echo>Validating Maven exists: ${maven-home}</echo>
        <condition property="_mvn_is_old">
            <not>
                <available file="${maven-home}" type="dir" />
            </not>
        </condition>
    </target>
    <target name="_unzip-mvn" if="_mvn_is_old">
        <echo>Getting the correct version of mvn.</echo>
        <antcall target="_tools-unzip">
            <param name="remote-tool" value="${maven-tool}-bin.zip" />
            <param name="_env-var" value="MAVEN_HOME" />
            <param name="_build.local-var" value="maven-home" />
            <param name="tool" value="${maven-tool}" />
            <param name="tool-executable" value="mvn" />
        </antcall>
        <!-- Theses are now stored in build.properties 
        <antcall target="_write_to_env_settings">
            <param name="__env-var" value="MAVEN_MEMORY_OPTS" />
            <param name="__build.local-var" value="MAVEN_MEMORY_OPTS" />
            <param name="__env-value" value="&quot;${maven-memory-opts}&quot;" />
        </antcall>
        <antcall target="_write_to_env_settings">
            <param name="__env-var" value="MAVEN_OPTS" />
            <param name="__env-value" value="${_env-var-before-env-ref}MAVEN_MEMORY_OPTS${_env-var-after-env-ref}" />
        </antcall>-->
    </target>

    <!-- NOTE: targets below this line must use very old ant tasks as we may be using a very old version of ant (many linux distros are very behind) -->
    <!-- ant -->
    <target name="_ant-config" depends="_validate-ant,_add-ant-path">
        <echo>Making ant-contrib tasks available</echo>
        <!-- otherwise would need: <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${tools-dir}/ant-contrib-${ant-contrib-build}/ant-contrib-${ant-contrib-build}.jar"/> -->
        <!-- we do this even though ant-contrib is checked in because we may have updated the ant-contrib release or the ant release. This avoids annoying breaks -->
        <copy file="ant-contrib-${ant-contrib-build}/ant-contrib-${ant-contrib-build}.jar" tofile="apache-ant-${ant-build}/lib/ant-contrib.jar" overwrite="true"/>
    </target>
    <target name="_fail-on-old-ant">
        <fail if="_ant_is_old" message="Your ant was an old version. Rerun ant using the new version. You MUST restart with a new shell to get your enviroment variable changes" />
    </target>
    <target name="_validate-ant">
        <echo>Checking ant version. Expecting: ${ant-build} Got: ${ant.version}</echo>
        <condition property="_ant_is_old">
            <not>
                <matches pattern="${ant-build}" string="${ant.version}" />
            </not>
        </condition>
    </target>
    <!-- Task writes the ant path to the env.settings file -->
    <target name="_add-ant-path" unless="ant-is-on-path" depends="_is-ant-on-path">
        <antcall target="_write_path_to_env_settings">
            <param name="tool" value="${ant-tool}" />
        </antcall>
    </target>
    <!-- determines if ant in the tools directory is on the environment path
    Stores the answer in ${ant-is-on-path}-->
    <target name="_is-ant-on-path">
        <property environment="test-env" />
        <condition property="ant-is-on-path">
            <contains string="${test-env.PATH}" substring="${tools-dir}${file.separator}${ant-tool}${file.separator}bin" />
        </condition>
    </target>

    <!-- downloading/unziping ant should no longer be needed, since it should be in the amplafi-tools dir and pulled from the opensource repository-->
    <target name="_unzip-ant" if="_ant_is_old">
        <echo>Getting the correct version of ant. Once it is downloaded, you will need to rerun ant using the downloaded version of ant.</echo>
        <antcall target="_tools-unzip">
            <param name="remote-tool" value="${ant-tool}-bin.zip" />
            <param name="_env-var" value="ANT_HOME" />
            <param name="_build.local-var" value="ant-home" />
            <param name="tool" value="${ant-tool}" />
            <param name="tool-executable" value="ant" />
        </antcall>
        <echo>Your ant was an old version. Rerun ant using the new version. See ${env.settings} file</echo>
    </target>
    <target name="scm-pull-tools">
        <antcall target="git-pull">
            <param name="project" value="amplafi-tools" />
        </antcall>
    </target>

    <!-- PHP Unit Testing -->
    <target name="phpunit-install" description="PHPUnit installation">
    	<echo>If pear is missing then run:
    		ant pear-install</echo>
    	<exec executable="pear">
    		<arg value="config-set"/>
            <arg value="auto_discover"/>
            <arg value="1"/>
		</exec>
        <exec executable="pear">
            <arg value="install"/>
            <arg value="pear.phpunit.de/PHPUnit"/>
    	</exec>
        <echo>Additional optional PHPUnit code is listed at http://www.phpunit.de/manual/3.7/en/installation.html</echo>
    </target>
    <target name="pear-install" description="Pear installation">
        <!-- TODO need to test for os version ( see below for mac only args ) -->
    	<!-- TODO do "pear upgrade PEAR" if pear already installed --> 
        <get src="http://pear.php.net/go-pear.phar" dest="bin/go-pear.phar"/>
        <fail>The bin/go-pear.phar is interactive. And we cannot run it automatically. Please run:
        	(for Non-Mac's):
            php ${tools-dir}/bin/go-pear.phar
        	(for Macs)
            php -d detect_unicode=0 ${tools-dir}/bin/go-pear.phar
        </fail>
    </target>
    <!-- ================JRUBY============================= -->
    <property name="jruby-jar" value="${mvn-repository}/org/jruby/jruby-complete/${jruby-version}/jruby-complete-${jruby-version}.jar"/>
    <target name="jruby" depends="_jruby-config" description="Creates the bin directory with jruby executable. Requires mvn be run to get jruby">
    </target>
    <target name="_jruby-config" depends="_jruby-validation,_jruby-download,_jruby-script-generation">
        <echo>${_jruby-available}</echo>
    </target>
    <target name="_jruby-validation">
        <condition property="_jruby-available">
            <and>
                <available file="${jruby-jar}" />
                <available file="bin/${jruby-exec}" />
            </and>
        </condition>
    </target>
    <target name="_jruby-script-generation" unless="_jruby-available">
        <mkdir dir="bin" />
        <echo file="bin/${jruby-exec}"> 
${_script-var-export} GEM_HOME=${env.GEM_HOME}
java -jar ${jruby-jar} -S ${_script-var-all-parameters}
        </echo>
        <chmod file="bin/${jruby-exec}" perm="ugo+rx" />
        <!-- TODO: this only works under unix, does windows need something similar?-->
        <antcall target="_write_path_to_env_settings">
            <param name="tool" value="" />
            <param name="_env-value" value="${tools-dir}${file.separator}bin" />
            <param name="_env-var" value="" />
            <param name="_build.local-var" value="${_build.local-var}" />
        </antcall>
        <antcall target="_write_to_env_settings">
            <param name="__env-var" value="GEM_HOME" />
            <param name="__env-value" value="${tools-dir}${file.separator}ruby${file.separator}gems" />
        </antcall>
        <antcall target="_write_path_to_env_settings">
            <param name="tool" value="ruby${file.separator}gems" />
            <param name="_env-value" value="${tools-dir}${file.separator}bin" />
            <param name="_env-var" value="" />
            <param name="_build.local-var" value="${_build.local-var}" />
        </antcall>
    </target>
    <target name="_jruby-download" unless="_jruby-available">
        <antcall target="_exec">
            <param name="_full-path-to-exec" value="${mvn}" />
            <param name="_arg-line" value='"org.apache.maven.plugins:maven-dependency-plugin:2.3:get" "-DrepoUrl=http://download.java.net/maven/2/" "-Dartifact=org.jruby:jruby-complete:${jruby-version}"' />
        </antcall>
    </target>
    <target name="css-tool-install" depends="_compass-installation,gem-cleanup" description="installs the tools (Compass, Sass) to handle css generation">
    </target>
    <target name="_compass-installation" depends="_jruby-config,_sass-installation">
        <antcall target="gem-install">
            <param name="gem" value="compass" />
        </antcall>
        <echo>need to copy the file : src/main/resources/compass-config/config.rb to the root directory of the project using compass</echo>
        <echo>TODO: (maybe run this command rather(?) than have a static config.rb )
compass install compass . --sass-dir "src/main/sass" --css-dir "src/main/webapp/css" --javascripts-dir "src/main/webapp/js" --images-dir "src/main/webapp/images"
also can we avoid having to set these:
            export GEM_HOME=......./amplafi-tools/ruby/gems
                export PATH=......./amplafi-tools/ruby/gems/bin:${PATH}
        </echo>
    </target>
    <target name="_sass-installation" depends="_jruby-config">
        <!-- runs equivalent of 'gem install sass' to download sass for use with jruby-->
        <!-- XXX: This would not have to be run on every call if there is a way to tell
        if sass has already been installed using jruby -->
        <echo>
            Installing sass:
            TODO: Check: Will this work if the terminal has not been reopened to refresh environment variables?
        </echo>
        <antcall target="gem-install">
            <param name="gem" value="sass" />
        </antcall>
    </target>
    
    
    <target name="compass-build" depends="_compass-config" description="Uses compass to build css related files.">
        <echo>${jruby} If this fails then in amplafi-tools run: "ant css-tool-install"; gem home= ${env.GEM_HOME}; compass-project-dir=${compass-project-dir}</echo>
        <antcall target="_exec">
            <param name="_full-path-to-exec" value="${jruby}" />
            <param name="_arg-line" value='"compass" "compile" ${_compass-command-line}' />
        </antcall>
    </target>
    <target name="compass-watch" depends="_compass-config" description="Uses compass to continuously watch and build css related files.">
        <fail unless="compass-project-dir" />
        <echo>This target will always fail, due to how you are to exit the compass watcher.</echo>
        <antcall target="_exec">
            <param name="_full-path-to-exec" value="${jruby}" />
            <param name="_arg-line" value='"compass" "watch" ${_compass-command-line}' />
        </antcall>
    </target>
    <target name="_compass-config" depends="jruby,_check-compass-config,_compass-set-commandline">
        <property name="_compass-command-line-args" value=""/>
        <property name="_compass-command-line" value=" '${compass-project-dir}' ${_compass-command-line-args} "/>
    </target>
    <target name="_check-compass-config">
        <available file="config.rb" filepath="${compass-project-dir}" property="_sass-config-found" />
    </target>
    <target name="_compass-set-commandline" unless="_sass-config-found">
        <!-- not certain if these default paths should really be relative -->
        <property name="compass-images-dir" value="src/main/resources/img"/>
        <property name="compass-javascript-dir" value="src/main/resources/js"/>
        <property name="compass-css-dir" value="src/main/resources/css"/>
        
        <property name="compass-sass-dir" value="src/main/sass"/>
        <property name="_compass-command-line-args" value=" '--images-dir=${compass-images-dir}' '--javascripts-dir=${compass-javascript-dir}' '--css-dir=${compass-css-dir}' '--sass-dir=${compass-sass-dir}' --output-style nested --no-line-comments"/>
    </target>
    <!-- Changes the file permissions in a specified directory to remove/add write permissions. -->
    <target name="_change-files-permissions-for-css-dir">
        <!-- Known Issues:
        * Subversion does not store file permissions. The only way that this is applied the the files is 
          if this target is run after downloading the files from the repository.
        * All of the css files are marked readonly even if they do not have a sass equivalent, so
          there is an exta step involved in editing these files.
          * Workaround - rename the css file to sass and put it in the sass directory, sass will will copy 
            it to the css directory on next compile.-->
        <echo>Changing permission in: ${_permissions-dir}</echo>
        <fail unless="_permissions-dir" message="Property _permissions-dir must be set. Determins directory of which files will be affected." />
        <fail unless="_permissions-set-readonly" message="Property _permissions-set-readonly must be set (true/false)" />
        <fileset dir="${_permissions-dir}" id="_css-files">
            <include name="**/*.css" />
        </fileset>
        <condition property="_permissions-unix" value="a-w" else="a+w">
            <istrue value="${_permissions-set-readonly}" />
        </condition>
        <condition property="_permissions-windows" value="true" else="false">
            <istrue value="${_permissions-set-readonly}" />
        </condition>
        <chmod perm="${_permissions-unix}">
            <fileset refid="_css-files" />
        </chmod>
        <attrib readonly="${_permissions-windows}">
            <fileset refid="_css-files" />
        </attrib>
    </target>
    <target name="gem-install" description="do a ruby gem install">
        <echo>Installing ruby gem ${gem} to ${tools-dir}${file.separator}ruby${file.separator}gems</echo>
        <antcall target="_exec">
            <!-- could add (doubledash)rdoc but some docs have errors -->  
            <param name="_full-path-to-exec" value="${jruby} gem install ${gem} --install-dir ${tools-dir}${file.separator}ruby${file.separator}gems" />
        </antcall>
    </target>
    <target name="gem-cleanup" description="do a ruby gem cleanup">
        <echo>Cleaning up ${env.GEM_HOME}</echo>
        <antcall target="_exec">
            <param name="_full-path-to-exec" value="${jruby}" />
            <param name="_arg-line" value='"gem" "cleanup"' />
        </antcall>
    </target>
    <target name="plovr-watch" description="Runs plovr server to compile closure on fly." depends="_closure-check-out">
        <antcall target="_exec">
            <param name="_full-path-to-exec" value="java" />
            <param name="_arg-line" value='-jar plovr.jar serve ${plovr-config}' />
        </antcall>
    </target>
    <target name="plovr-build" description="Compiles closure application." depends="_closure-check-out">
        <antcall target="_exec">
            <param name="_full-path-to-exec" value="java" />
            <param name="_arg-line" value='-jar plovr.jar build ${plovr-config} &gt; ${prod-closure-file}' />
        </antcall>
    </target>
    <target name="_closure-check-out">
        <antcall target="_exec">
            <param name="_full-path-to-exec" value="svn" />
            <param name="_arg-line" value='checkout http://closure-library.googlecode.com/svn/trunk/ closure-library-read-only' />
        </antcall>
        <antcall target="_exec">
            <param name="_full-path-to-exec" value="svn" />
            <param name="_arg-line" value='checkout http://closure-templates.googlecode.com/svn/trunk/ closure-templates-read-only' />
        </antcall>
    </target>
    <!-- Run an executable on linux or a bat file on windows.
    It is reccomended that you pass the ${_arg-line} parameter with quotations around each argument.
    Example: <param name="_arg-line" value='"${argOne}" "${argTwo}"'/> This way if ${argOne} is a 
    fileName with a space in it, it will not be inadvertantly broken up into two arguments.
    Just remember user input is not supported,
    so commands must be non-interactive-->
    <target name="_exec">
        <fail unless="_full-path-to-exec" message="_full-path-to-exec is not set"/>
        <!-- set _arg-line to blank if _arg-line is not set to a value. This stops the executable from getting a bad argument -->
        <condition property="_arg-line" value="">
            <equals arg1="${_arg-line}" arg2="$${_arg-line}" />
        </condition>
        <echo>Executing ${_full-path-to-exec} ${_arg-line}</echo>
        <exec executable="cmd" osfamily="windows" failonerror="true">
            <arg value="/c" />
            <arg file="${_full-path-to-exec}" />
            <arg line="${_arg-line}" />
        </exec>
        <exec executable="/bin/sh" osfamily="unix" failonerror="true">
            <arg line='-c "${_full-path-to-exec} ${_arg-line}"' />
        </exec>
    </target>
    <!-- ============================================= -->
    <target name="_tools-unzip" depends="_mkdir-tools">
        <!-- no longer need
        <delete file="${tools-dir}/${remote-tool}" />
        <get src="http://sworddance.com/tools/${remote-tool}" dest="${tools-dir}/${remote-tool}" verbose="false" /> -->
        <unzip src="${tools-dir}/${remote-tool}" dest="${tools-dir}">
        </unzip>
        <antcall target="_write_path_to_env_settings">
            <param name="_env-value" value="${tools-dir}/${tool}" />
            <param name="_env-var" value="${_env-var}" />
            <param name="_build.local-var" value="${_build.local-var}" />
        </antcall>
        <chmod dir="${tools-dir}/${tool}/bin" perm="ugo+rx" includes="**/*.sh ${tool-executable}" />
        <property name="_download-happened" value="true" />
        <echo>Master ${tools-dir}/${remote-tool} was extracted to ${tools-dir}/${remote-tool}. </echo>
    </target>
    <target name="_mkdir-tools">
        <mkdir dir="${tools-dir}" />
    </target>


    <!-- java testing -->
    <target name="_java-config" depends="_validate-java,_validate-javac">
        <echo>Java looks good :-)</echo>
    </target>
    <target name="_validate-javac" depends="_validate-javac_in_path,_validate-javac_using_env">
    </target>
    <target name="_validate-javac_in_path">
        <available file="javac" filepath="${env.PATH}" property="_javac-found" />
        <available file="javac.exe" filepath="${env.PATH}" property="_javac-found" />
    </target>

    <target name="_validate-javac_using_env" depends="_validate-JAVA_HOME" unless="_javac-found">
        <!-- someone may have just the JRE loaded. (i.e. no javac compiler ) we are requiring that JAVA_HOME env be set so use that -->
        <fail message="${env.JAVA_HOME}/bin/javac (also looked for javac.exe) does not exist- You need to download the Java JDK from http://java.sun.com/javase/downloads/index.jsp">
            <condition>
                <not>
                    <or>
                        <available file="${env.JAVA_HOME}/bin/javac" property="_javac-found" />
                        <available file="${env.JAVA_HOME}/bin/javac.exe" property="_javac-found" />
                    </or>
                </not>
            </condition>
        </fail>
    </target>
    <target name="_validate-java">
        <echo>Checking for correct java version. Expecting: ${java-build} runtime=${java.runtime.version} compiler=${java.version}</echo>
        <fail message="Old java need version ${java-build} runtime=${java.runtime.version} ${java.version}">
            <condition>
                <not>
                    <and>
                        <matches pattern="^${java-build}" string="${java.runtime.version}" />
                        <matches pattern="^${java-build}" string="${java.version}" />
                    </and>
                </not>
            </condition>
        </fail>
    </target>
    <target name="_validate-JAVA_HOME" unless="_javac-found">
        <fail unless="env.JAVA_HOME" message="JAVA_HOME has not been set. Check to make sure all the environment variables defined in ${env.settings} have been added to your enviroment" />
    </target>
	
	<!-- MYSQL targets -->
    <target name="mysql-root-user-check" description="Check to see if supplied mysql root user/password works">
        <input
          message="Enter the mysql-root-user: "
          addproperty="mysql-root-user"
        />        
        <input message="Enter the mysql root username (${mysql-root-user})'s password:" addproperty="mysql-root-password"/>
        <exec executable="${mysql}" errorproperty="_mysql-root-user-check-error">
            <arg value="--user=${mysql-root-user}"/>
            <arg value="--password=${mysql-root-password}"/>
        </exec>
        <condition property="_mysql-root-user-check-failed">
            <not><equals arg1="" arg2="${_mysql-root-user-check-error}"/></not>            
        </condition>
    </target>
    <target name="init-database-users" depends="mysql-root-user-check" description="init-database-users">
    	<fail unless="mysql-user-account"/>
    	<fail unless="mysql-user-password"/>
    	<fail unless="database-name"/>
    	<fail unless="mysql-root-user"/>
        <fail unless="mysql-root-password"/>
        <echo>Creating "${mysql-user-account}" database user account. You will need to login with the mysql root account</echo>
        <!-- happens if mysql-root-user does not have a value -->
        <!-- ERROR 1045 (28000): Access denied for user '-p'@'localhost' (using password: NO) -->
        <!-- TODO: need to ask user with ant for a mysql-root-user -->
        <echo>Creating access for ${mysql-user-account} (if this fails make sure user name is less than 16 characters)</echo>
        <for list="%,localhost" param="mysql-scope">
            <sequential>
            	<echo>GRANT ${mysql-privileges} ON ${database-name}.* TO '${mysql-user-account}'@'@{mysql-scope}' IDENTIFIED BY '${mysql-user-password}';"</echo>
                <exec executable="${mysql}" errorproperty="_init-database-users-failed">
                      <arg value="--user=${mysql-root-user}"/>
                      <arg value="--password=${mysql-root-password}"/>
                      <arg value="--execute=GRANT ${mysql-privileges} ON ${database-name}.* TO '${mysql-user-account}'@'@{mysql-scope}' IDENTIFIED BY '${mysql-user-password}';"/>
                </exec>
            </sequential>
        </for>
    </target>
    <target name="mysql-drop-and-create-db" depends="mysql-root-user-check">
        <fail unless="database-name"/>
        <echo>Dropping database ${database-name} ${mysql-charset}</echo>
        <exec executable="${mysql}">
              <arg value="--user=${mysql-root-user}"/>
              <arg value="--password=${mysql-root-password}"/>
              <arg value="--execute=drop database if exists `${database-name}`; create database `${database-name}` ${mysql-charset};"/>
        </exec>
    </target>
    <target name="mysql-reset-root-password" depends="_mysql-root-user-check" description="Reset mysql root user/password">
        <echo>Steps laid out at http://www.cyberciti.biz/tips/recover-mysql-root-password.html and http://dev.mysql.com/doc/refman/5.0/en/resetting-permissions.html</echo>
        <echo>Make sure the mysql daemon is stopped ( use kill but not kill -9 )</echo>
        <input message="Confirm resetting mysql root password? [y/n]" validargs="y,n" addproperty="_do-mysql-reset-root-password-answer"/>
        <condition property="_do-mysql-reset-root-password">
          <equals arg1="y" arg2="${_do-mysql-reset-root-password-answer}"/>
        </condition>        
        <antcall target="_do-mysql-reset-root-password"/>
    </target>
    <target name="_do-mysql-reset-root-password" if="_do-mysql-reset-root-password">
        <!--
        <exec executable="${mysql}">
            <arg value="stop"/>
        </exec>
        -->
        <echo>Starting mysql w/o password enabled.</echo>
        <exec executable="${mysqld}" spawn="true">
            <arg value="--skip-grant-tables"/>
        </exec>
        <ant dir="${tools-dir}" target="mysql-reset-root-password-actual">
        </ant>
        <!--
        <exec executable="${mysql}">
            <arg value="stop"/>
        </exec>
        -->
        <echo>Do the mysql stop/ restart now</echo>
    </target>
    <target name="mysql-reset-root-password-actual" depends="_mysql-root-user-check" description="Used when manually starting and stopping the mysql daemon. (Usually use mysql-reset-root-password)" if="_do-mysql-reset-root-password">
        <echo>Resetting password for ${mysql-root-user}.</echo>
        <!-- maybe use 'REPLACE' instead of update to handle case where ${mysql-root-user} does not exist? -->
        <exec executable="${mysql}">
            <arg value="-u"/>
            <arg value="root"/>
            <arg value="mysql"/>
            <arg value="--execute=update user set password=PASSWORD(&quot;${mysql-root-password}&quot;) where User='${mysql-root-user}';flush privileges"/>
        </exec>
    </target>
    <target name="_mysql-root-user-check">
        <!-- TODO use amplafi-tools target: mysql-root-user-check -->
        <input
          message="Enter the mysql-root-user: "
          addproperty="mysql-root-user"
        />        
        <input message="Enter the mysql root username (${mysql-root-user})'s password:" addproperty="mysql-root-password"/>
        <exec executable="${mysql}" errorproperty="_mysql-root-user-check-error">
            <arg value="--user=${mysql-root-user}"/>
            <arg value="--password=${mysql-root-password}"/>
        </exec>
        <condition property="_mysql-root-user-check-failed">
            <not><equals arg1="" arg2="${_mysql-root-user-check-error}"/></not>            
        </condition>
    </target>
    <target name="mysql-input-sql" description="input sql">
        <fail unless="input-sql"/>
        <fail unless="database-name"/>
        <fail unless="mysql-username"/>
        <fail unless="mysql-password"/>
        <available file="${input-sql}" property="_input-sql-file-exists" type="file"/>
        <fail unless="_input-sql-file-exists" message="'${input-sql}' file does not exist"/>
        <exec executable="${mysql}" failonerror="true" input="${input-sql}">
            <arg value="--user=${mysql-username}"/>
            <arg value="--password=${mysql-password}"/>
            <arg value="--database=${database-name}"/>
        </exec>
    </target>
    
    <target name="_write_to_env_settings" depends="_write_to_build_local_properties">
        <echo>
                ===============================================================================
                Environment variable settings added to ${env.settings}.
                ===============================================================================
            </echo>
        <fail unless="__env-var" />
        <fail unless="__env-value" />
        <echo file="${env.settings}" append="true">
    ${_env-var-before}${__env-var}${_env-var-between}${__env-value}${_env-var-after}</echo>
    </target>
    <target name="_write_to_build_local_properties" if="__build.local-var">
        <echo file="${build.local.properties}" append="true">
        ${__build.local-var}=${__env-value}</echo>
    </target>
    <target name="_write_path_to_env_settings">
        <fail unless="tool" />

        <!-- This is stored in build.properties now 
        <fail unless="_env-var" />
        <antcall target="_write_to_env_settings">
            <param name="__env-var" value="${_env-var}" />
            <param name="__build.local-var" value="${_build.local-var}" />
            <param name="__env-value" value="${tools-dir}${file.separator}${tool}" />
        </antcall> -->
        <antcall target="_write_to_env_settings">
            <param name="__env-var" value="PATH" />
            <param name="__env-value" value="${tools-dir}${file.separator}${tool}${file.separator}bin${path.separator}${_env-var-before-env-ref}PATH${_env-var-after-env-ref}" />
        </antcall>
    </target>
    <target name="_mvn">
        <fail unless="mvn-target" />
        <property name="mvn-env" value=""/>
        <property name="_exec-dir" value="${basedir}"/>
        <!-- need to construct commandline manually because not all values are supplied  -->
        <echo>Running: ${mvn} ${mvn-env} ${mvn-profile} ${mvn-target}</echo>
        <!-- see http://ant.apache.org/manual/CoreTasks/exec.html :  windows users need to run "cmd /c mvn.bat" -->
        <exec dir="${_exec-dir}" command="&quot;${mvn}&quot; ${mvn-env} ${mvn-profile} ${mvn-target}">
        </exec>
    </target>
    <target name="_mvn-no-tests">
        <fail unless="mvn-target" />
        <property name="mvn-env" value=""/>
        <property name="_exec-dir" value="${basedir}"/>
        <!-- need to construct commandline manually because not all values are supplied  -->
        <echo>Running: ${mvn} ${mvn-env} ${mvn-profile} ${mvn-target}</echo>
        <!-- see http://ant.apache.org/manual/CoreTasks/exec.html :  windows users need to run "cmd /c mvn.bat" -->
        <exec dir="${_exec-dir}" command="&quot;${mvn}&quot; ${mvn-env} ${mvn-profile} ${mvn-no-tests-sys-property} ${mvn-target}">
        </exec>
    </target>
    <target name="_backup">
        <fail unless="_file" />
        <fail unless="_ext" />
        <basename property="_basename" file="${_file}" suffix="${_ext}" />
        <dirname property="_dirname" file="${_file}" />
        <condition property="_move_verbose" value="false">
            <not>
                <isset property="_move_verbose" />
            </not>
        </condition>
        <move file="${_dirname}/${_basename}.${_ext}" tofile="${_dirname}/${_basename}.${time-suffix}.${_ext}" failonerror="false" verbose="${_move_verbose}" />
    </target>
    <target name="_say">
        <exec executable="say" os="Mac OS X">
            <arg value="${_say_what}" />
        </exec>
    </target>
</project>
