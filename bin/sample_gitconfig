[alias]
	ha = "!sh -c 'git help -a | cat - .git/config ~/.gitconfig | more' - "
        mg = merge -s recursive -Xours -Xpatience -Xignore-all-space
        ff = merge --ff-only
        mgn = mg --no-commit
	pusht = push --tags
        
        # git alias new_alias original_command
        alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"
	lgf = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --name-only
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	lga = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=iso
	lgl = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=local
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	lgnm = log --no-merges --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
        full = log --name-only

	# find commits by the first characters of their sha-1
	abbr = "!sh -c 'git rev-list --all | grep ^$1 | while read commit; do git --no-pager log -n1 --pretty=format:\"%H %ci %an %s%n\" $commit; done' -"
        # There's no way to tell git remote update to prune stale branches, and git remote prune does not understand --all. So here is an alias to do the job
        prune-all = !git remote | xargs -n 1 git remote prune
        
	ls = ls-files
	# finds last copy of file before it was removed and checks that version back out for restoring
	unrm = !git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"

	# Show files ignored by git:
	ign = ls-files -o -i --exclude-standard

	sh = stash
	shp = stash pop
	shl = stash list
	
	ap = add -p 
	ci = commit 
	cim = commit -m 
	cia = commit --amend
	co = checkout
	com = checkout master
	st = status
	cf = "!sh -c 'cat .git/config ~/.gitconfig' - "
	vc = "!sh -c 'vi ~/.gitconfig' - "
	dfc = diff --cached
	dfw = diff -w
	dfno = diff -w --name-only
        # double -v is intentional :-)
	br = branch -a -v -v
	brb = branch -b
	brd = branch -d
	# same as git push origin :<branch to delete> (removes remote branch )
        rmbr = push origin --delete
	ch = cherry --abbrev -v 
	chp = cherry-pick 
	rb = rebase
        rbm = rebase master
        rbo = rebase origin/master
        rba = rebase --abort
        rbc = rebase --continue
        rbs = rebase --skip
	rbn = !git rebase -i "HEAD~$1"
 
        # put the current branch back a few commits ( usually 1 ) - leaves files changed since then in the working tree
        back = reset HEAD^
        # the git commit will fail if there is nothing to commit. if so then just do the rebase without the reset )
        upd = "!sh -c 'git fetch --prune; git ff || ( git add -A . && ((git commit -m"WIP" && git rb && git reset HEAD~ ) || git rb))'"

	catp = cat-file -p
	catt = cat-file -t
	h = help
	hash = hash-object
# http://gitready.com/advanced/2011/10/21/ribbon-and-catchup-reading-new-commits.html
	ribbon = tag --force _ribbon origin/master
# to reduce branch merge noise add : --first-parent -m
	vcatchup = log --patch --reverse --topo-order _ribbon..origin/master
	catchup = log --patch --reverse --topo-order --first-parent -m -w _ribbon..origin/master
[merge]
	defaultToUpstream = true
[diff]
	suppressBlankEmpty = true
[gc]
	auto = 1000
[color]
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[core]
    whitespace=fix,-indent-with-non-tab,-trailing-space,cr-at-eol,tabwidth=4
[diff]
	mnemonicprefix = true
[push]
	default=simple
