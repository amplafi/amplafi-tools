--- !ruby/object:RI::ClassDescription 
attributes: 
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: A list of units in the denominator of the number. For example, `1px*em/in*cm` would return `[&quot;in&quot;, &quot;cm&quot;]` @return [Array&lt;String&gt;]
    name: denominator_units
    rw: R
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: A list of units in the numerator of the number. For example, `1px*em/in*cm` would return `[&quot;px&quot;, &quot;em&quot;]` @return [Array&lt;String&gt;]
    name: numerator_units
    rw: R
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: The original representation of this number. For example, although the result of `1px/2px` is `0.5`, the value of `#original` is `&quot;1px/2px&quot;`.
      - !ruby/struct:SM::Flow::P 
        body: "This is only non-nil when the original value should be used as the CSS value, as in `font: 1px/2px`."
      - !ruby/struct:SM::Flow::P 
        body: "@return [Boolean, nil]"
    name: original
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: The Ruby value of the number.
      - !ruby/struct:SM::Flow::P 
        body: "@return [Numeric]"
    name: value
    rw: R
class_methods: 
  - !ruby/object:RI::MethodSummary 
    name: new
comment: 
  - !ruby/struct:SM::Flow::P 
    body: A SassScript object representing a number. SassScript numbers can have decimal values, and can also have units. For example, `12`, `1px`, and `10.45em` are all valid values.
  - !ruby/struct:SM::Flow::P 
    body: Numbers can also have more complex units, such as `1px*em/in`. These cannot be inputted directly in Sass code at the moment.
constants: 
  - !ruby/object:RI::Constant 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: The precision with which numbers will be printed to CSS files. For example, if this is `1000.0`, `3.1415926` will be printed as `3.142`. @api public
    name: PRECISION
    value: "1000.0"
  - !ruby/object:RI::Constant 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Used so we don't allocate two new arrays for each new number.
    name: NO_UNITS
    value: "[]"
  - !ruby/object:RI::Constant 
    comment: 
    name: OPERATIONS
    value: "[:+, :-, :<=, :<, :>, :>=]"
  - !ruby/object:RI::Constant 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: A hash of unit names to their index in the conversion table
    name: CONVERTABLE_UNITS
    value: "{\"in\" => 0,        \"cm\" => 1,    \"pc\" => 2,    \"mm\" => 3,   \"pt\" => 4}"
  - !ruby/object:RI::Constant 
    comment: 
    name: CONVERSION_TABLE
    value: "[[ 1,                2.54,         6,            25.4,        72        ], # in                         [ nil,              1,            2.36220473,   10,          28.3464567], # cm                         [ nil,              nil,          1,            4.23333333,  12        ], # pc                         [ nil,              nil,          nil,          1,           2.83464567], # mm                         [ nil,              nil,          nil,          nil,         1         ]]"
full_name: Sass::Script::Number
includes: []

instance_methods: 
  - !ruby/object:RI::MethodSummary 
    name: coerce
  - !ruby/object:RI::MethodSummary 
    name: comparable_to?
  - !ruby/object:RI::MethodSummary 
    name: div
  - !ruby/object:RI::MethodSummary 
    name: eq
  - !ruby/object:RI::MethodSummary 
    name: gt
  - !ruby/object:RI::MethodSummary 
    name: gte
  - !ruby/object:RI::MethodSummary 
    name: inspect
  - !ruby/object:RI::MethodSummary 
    name: int?
  - !ruby/object:RI::MethodSummary 
    name: legal_units?
  - !ruby/object:RI::MethodSummary 
    name: lt
  - !ruby/object:RI::MethodSummary 
    name: lte
  - !ruby/object:RI::MethodSummary 
    name: minus
  - !ruby/object:RI::MethodSummary 
    name: mod
  - !ruby/object:RI::MethodSummary 
    name: plus
  - !ruby/object:RI::MethodSummary 
    name: times
  - !ruby/object:RI::MethodSummary 
    name: to_i
  - !ruby/object:RI::MethodSummary 
    name: to_s
  - !ruby/object:RI::MethodSummary 
    name: to_sass
  - !ruby/object:RI::MethodSummary 
    name: unary_minus
  - !ruby/object:RI::MethodSummary 
    name: unary_plus
  - !ruby/object:RI::MethodSummary 
    name: unit_str
  - !ruby/object:RI::MethodSummary 
    name: unitless?
name: Number
superclass: Literal
