--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Joins together two lists into a new list.
  - !ruby/struct:SM::Flow::P 
    body: Unless the `$separator` argument is passed, if one list is comma-separated and one is space-separated, the first parameter's separator is used for the resulting list. If the lists have only one item each, spaces are used for the resulting list.
  - !ruby/struct:SM::Flow::P 
    body: "@example"
  - !ruby/struct:SM::Flow::VERB 
    body: "  join(10px 20px, 30px 40px) =&gt; 10px 20px 30px 40px\n  join((blue, red), (#abc, #def)) =&gt; blue, red, #abc, #def\n  join(10px, 20px) =&gt; 10px 20px\n  join(10px, 20px, comma) =&gt; 10px, 20px\n  join((blue, red), (#abc, #def), space) =&gt; blue red #abc #def\n"
  - !ruby/struct:SM::Flow::P 
    body: "@overload join(list1, list2, separator: auto)"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @param list1 [Literal] The first list to join\n  @param list2 [Literal] The second list to join\n  @param separator [String] How the list separator (comma or space) should be determined.\n    If this is `comma` or `space`, that is always the separator;\n    if this is `auto` (the default), the separator is determined as explained above.\n"
full_name: Sass::Script::Functions#join
is_singleton: false
name: join
params: (list1, list2, separator = Sass::Script::String.new("auto"))
visibility: public
