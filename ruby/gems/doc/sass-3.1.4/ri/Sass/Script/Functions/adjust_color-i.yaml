--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Adjusts one or more properties of a color. This can change the red, green, blue, hue, saturation, value, and alpha properties. The properties are specified as keyword arguments, and are added to or subtracted from the color's current value for that property.
  - !ruby/struct:SM::Flow::P 
    body: "`$red`, `$green`, and `$blue` properties should be between 0 and 255. `$saturation` and `$lightness` should be between 0% and 100%. `$alpha` should be between 0 and 1."
  - !ruby/struct:SM::Flow::P 
    body: All properties are optional. You can't specify both RGB properties (`$red`, `$green`, `$blue`) and HSL properties (`$hue`, `$saturation`, `$value`) at the same time.
  - !ruby/struct:SM::Flow::P 
    body: "@example"
  - !ruby/struct:SM::Flow::VERB 
    body: "  adjust-color(#102030, $blue: 5) =&gt; #102035\n  adjust-color(#102030, $red: -5, $blue: 5) =&gt; #0b2035\n  adjust-color(hsl(25, 100%, 80%), $lightness: -30%, $alpha: -0.4) =&gt; hsla(25, 100%, 50%, 0.6)\n"
  - !ruby/struct:SM::Flow::P 
    body: "@param color [Color] @param red [Number] @param green [Number] @param blue [Number] @param hue [Number] @param saturation [Number] @param lightness [Number] @param alpha [Number] @return [Color] @raise [ArgumentError] if `color` is not a color,"
  - !ruby/struct:SM::Flow::VERB 
    body: "  if any keyword argument is not a number,\n  if any keyword argument is not in the legal range,\n  if an unexpected keyword argument is given,\n  or if both HSL and RGB properties are given.\n"
full_name: Sass::Script::Functions#adjust_color
is_singleton: false
name: adjust_color
params: (color, kwargs)
visibility: public
