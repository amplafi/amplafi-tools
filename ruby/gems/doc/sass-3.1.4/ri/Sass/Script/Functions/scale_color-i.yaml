--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Scales one or more properties of a color by a percentage value. Unlike \{#adjust_color adjust-color}, which changes a color's properties by fixed amounts, \{#scale_color scale-color} fluidly changes them based on how high or low they already are. That means that lightening an already-light color with \{#scale_color scale-color} won't change the lightness much, but lightening a dark color by the same amount will change it more dramatically. This has the benefit of making `scale-color($color, ...)` have a similar effect regardless of what `$color` is.
  - !ruby/struct:SM::Flow::P 
    body: "For example, the lightness of a color can be anywhere between 0 and 100. If `scale-color($color, $lightness: 40%)` is called, the resulting color's lightness will be 40% of the way between its original lightness and 100. If `scale-color($color, $lightness: -40%)` is called instead, the lightness will be 40% of the way between the original and 0."
  - !ruby/struct:SM::Flow::P 
    body: This can change the red, green, blue, saturation, value, and alpha properties. The properties are specified as keyword arguments. All arguments should be percentages between 0% and 100%.
  - !ruby/struct:SM::Flow::P 
    body: All properties are optional. You can't specify both RGB properties (`$red`, `$green`, `$blue`) and HSL properties (`$saturation`, `$value`) at the same time.
  - !ruby/struct:SM::Flow::P 
    body: "@example"
  - !ruby/struct:SM::Flow::VERB 
    body: "  scale-color(hsl(120, 70, 80), $lightness: 50%) =&gt; hsl(120, 70, 90)\n  scale-color(rgb(200, 150, 170), $green: -40%, $blue: 70%) =&gt; rgb(200, 90, 229)\n  scale-color(hsl(200, 70, 80), $saturation: -90%, $alpha: -30%) =&gt; hsla(200, 7, 80, 0.7)\n"
  - !ruby/struct:SM::Flow::P 
    body: "@param color [Color] @param red [Number] @param green [Number] @param blue [Number] @param saturation [Number] @param lightness [Number] @param alpha [Number] @return [Color] @raise [ArgumentError] if `color` is not a color,"
  - !ruby/struct:SM::Flow::VERB 
    body: "  if any keyword argument is not a percentage between 0% and 100%,\n  if an unexpected keyword argument is given,\n  or if both HSL and RGB properties are given.\n"
full_name: Sass::Script::Functions#scale_color
is_singleton: false
name: scale_color
params: (color, kwargs)
visibility: public
