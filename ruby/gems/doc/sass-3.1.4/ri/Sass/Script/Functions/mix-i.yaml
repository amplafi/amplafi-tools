--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Mixes together two colors. Specifically, takes the average of each of the RGB components, optionally weighted by the given percentage. The opacity of the colors is also considered when weighting the components.
  - !ruby/struct:SM::Flow::P 
    body: The weight specifies the amount of the first color that should be included in the returned color. The default, 50%, means that half the first color and half the second color should be used. 25% means that a quarter of the first color and three quarters of the second color should be used.
  - !ruby/struct:SM::Flow::P 
    body: "@example"
  - !ruby/struct:SM::Flow::VERB 
    body: "  mix(#f00, #00f) =&gt; #7f007f\n  mix(#f00, #00f, 25%) =&gt; #3f00bf\n  mix(rgba(255, 0, 0, 0.5), #00f) =&gt; rgba(63, 0, 191, 0.75)\n"
  - !ruby/struct:SM::Flow::P 
    body: "@overload mix(color1, color2, weight: 50%)"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @param color1 [Color]\n  @param color2 [Color]\n  @param weight [Number] between 0% and 100%\n  @return [Color]\n  @raise [ArgumentError] if `color1` or `color2` aren't colors,\n    or `weight` isn't a number between 0% and 100%\n"
full_name: Sass::Script::Functions#mix
is_singleton: false
name: mix
params: (color1, color2, weight = Number.new(50))
visibility: public
