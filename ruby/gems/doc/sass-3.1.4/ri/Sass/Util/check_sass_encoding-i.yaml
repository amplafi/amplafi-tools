--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Like {\#check_encoding}, but also checks for a `@charset` declaration at the beginning of the file and uses that encoding if it exists.
  - !ruby/struct:SM::Flow::P 
    body: The Sass encoding rules are simple. If a `@charset` declaration exists, we assume that that's the original encoding of the document. Otherwise, we use whatever encoding Ruby has. Then we convert that to UTF-8 to process internally. The UTF-8 end result is what's returned by this method.
  - !ruby/struct:SM::Flow::P 
    body: "@param str [String] The string of which to check the encoding @yield [msg] A block in which an encoding error can be raised."
  - !ruby/struct:SM::Flow::VERB 
    body: "  Only yields if there is an encoding error\n"
  - !ruby/struct:SM::Flow::P 
    body: "@yieldparam msg [String] The error message to be raised @return [(String, Encoding)] The original string encoded as UTF-8,"
  - !ruby/struct:SM::Flow::VERB 
    body: "  and the source encoding of the string (or `nil` under Ruby 1.8)\n"
  - !ruby/struct:SM::Flow::P 
    body: "@raise [Encoding::UndefinedConversionError] if the source encoding"
  - !ruby/struct:SM::Flow::VERB 
    body: "  cannot be converted to UTF-8\n"
  - !ruby/struct:SM::Flow::P 
    body: "@raise [ArgumentError] if the document uses an unknown encoding with `@charset`"
full_name: Sass::Util#check_sass_encoding
is_singleton: false
name: check_sass_encoding
params: (str, &block)
visibility: public
