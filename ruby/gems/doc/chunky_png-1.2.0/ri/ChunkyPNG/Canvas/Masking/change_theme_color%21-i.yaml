--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Creates a new image, based on the current image but with a new theme color.
  - !ruby/struct:SM::Flow::P 
    body: This method will replace one color in an image with another image. This is done by first extracting the pixels with a color close to the original theme color as a mask image, changing the color of this mask image and then apply it on the original image.
  - !ruby/struct:SM::Flow::P 
    body: Mask extraction works best when the theme colored pixels are clearly distinguishable from a background color (preferably white). You can set a tolerance level to influence the extraction process.
  - !ruby/struct:SM::Flow::P 
    body: "@param [Integer] old_theme_color The original theme color in this image. @param [Integer] new_theme_color The color to replace the old theme color with. @param [Integer] The background color on which the theme colored pixels are placed. @param [Integer] tolerance The tolerance level to use when extracting the mask image. Five is"
  - !ruby/struct:SM::Flow::VERB 
    body: "   the default; increase this if the masked image does not extract all the required pixels,\n   decrease it if too many pixels get extracted.\n"
  - !ruby/struct:SM::Flow::P 
    body: "@return [ChunkyPNG::Canvas] Returns itself, but with the theme colored pixels changed. @see #change_theme_color! @see #change_mask_color!"
full_name: ChunkyPNG::Canvas::Masking#change_theme_color!
is_singleton: false
name: change_theme_color!
params: (old_theme_color, new_theme_color, bg_color = ChunkyPNG::Color::WHITE, tolerance = 5)
visibility: public
