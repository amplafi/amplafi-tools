--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Converts this Canvas to a datastream, so that it can be saved as a PNG image. @param [Hash, Symbol] constraints The constraints to use when encoding the canvas.
  - !ruby/struct:SM::Flow::VERB 
    body: "   This can either be a hash with different constraints, or a symbol which acts as a\n   preset for some constraints. If no constraints are given, ChunkyPNG will decide\n   for itself how to best create the PNG datastream.\n   Supported presets are <tt>:fast_rgba</tt> for quickly saving images with transparency,\n   <tt>:fast_rgb</tt> for quickly saving opaque images, and <tt>:best_compression</tt> to\n   obtain the smallest possible filesize.\n"
  - !ruby/struct:SM::Flow::P 
    body: "@option constraints [Fixnum] :color_mode The color mode to use. Use one of the"
  - !ruby/struct:SM::Flow::VERB 
    body: "   ChunkyPNG::COLOR_* constants.\n"
  - !ruby/struct:SM::Flow::P 
    body: "@option constraints [true, false] :interlace Whether to use interlacing. @option constraints [Fixnum] :compression The compression level for Zlib. This can be a"
  - !ruby/struct:SM::Flow::VERB 
    body: "   value between 0 and 9, or a Zlib constant like Zlib::BEST_COMPRESSION.\n"
  - !ruby/struct:SM::Flow::P 
    body: "@option constraints [Fixnum] :bit_depth The bit depth to use. This option is only used"
  - !ruby/struct:SM::Flow::VERB 
    body: "   for indexed images, in which case it overrides the determined minimal bit depth. For\n   all the other color modes, a bit depth of 8 is used.\n"
  - !ruby/struct:SM::Flow::P 
    body: "@return [ChunkyPNG::Datastream] The PNG datastream containing the encoded canvas. @see ChunkyPNG::Canvas::PNGEncoding#determine_png_encoding"
full_name: ChunkyPNG::Canvas::PNGEncoding#to_datastream
is_singleton: false
name: to_datastream
params: (constraints = {})
visibility: public
